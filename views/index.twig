{% extends 'layout.twig' %}
{% block title %} Index {% endblock %}

	{% block body %}

		<div class="row">

			<div class="col s12 m7">

				<table class="centered striped">
					<thead>
						<tr>
							<th>Norme</th>
							<th>Note</th>
						</tr>
					</thead>

					<tbody>
						<tr>
							<td>Java</td>
							<td>{{global.java.note}} / {{global.total.java}}</td>
						</tr>
						<tr>
							<td>Mémoire</td>
							<td>{{global.ram.note}} / {{global.total.memoire}}</td>
						</tr>
						<tr>
							<td>Randomness</td>
							<td>{{global.random.note}} / {{global.total.random}}</td>
						</tr>
						<tr>
							<td>Arborescence</td>
							<td>{{global.files.note}} / {{global.total.files}}</td>
						</tr>
					</tbody>
				</table>

			</div>

			<div class="col s12 m5" >
				<div style="color:white;border-radius:5px;margin-top:20%" class="container center 

				{% if global.result < global.total.somme / 2 %} red
				{% elseif global.result < global.total.somme  %} orange
				{% else %} green
				{% endif %}

				lighten-2">

				<h3>Note : {{global.result}} / {{global.total.somme}} </h3>

			</div>
		</div>

		<div class="col s12">

			<div class="col s12 m6">
				<div class="card 

				{% if global.ram.note == 15 %} green
				{% elseif global.ram.note == 7 %} orange
				{% else %} red lighten-2 
				{% endif %}">

				<div class="card-content white-text">
					<span class="card-title"><u>Mémoire vive </u> ( {{global.constant.REQUIRED_MEMORY}} Go requis )</span>
					Mémoire totale : {{global.ram.total}} Go<br>
					Mémoire disponible : {{global.ram.free}} Go <br>
				</div>

			</div>
		</div>
		<div class="col s12 m6">

			<div class="card 
			{% if global.java.note == 20 %} green
			{% elseif global.java.note == 0 %} red lighten-2
			{% endif %}">

			<div class="card-content white-text">
				<span class="card-title"><u>Java</u> ( version {{global.constant.JAVA_VERSION}} requise )</span>
				{% if global.java.javaVersion %}
					<p>La version actuellement installée est la version {{ global.java.javaVersion }}.</p>
				{% else %}
					<p>Aucune instance de java n'est actuellement installée.</p>
				{% endif %}
			</div>

		</div>
	</div>

</div>

<div class="col s12">

	<div class="col s12 m6">

		<div class="card 

		{% if global.random.note == 10 %} green
		{% elseif global.random.note > 5 %} orange
		{% else %} red lighten-2 
		{% endif %}">

		<div class="card-content white-text">
			<span class="card-title"><u>Séquence aléatoire</u> ( {{global.constant.RANDOMNESS}} requises )</span>
			{% if global.random.data == "windows" %}
				<p>Les systèmes Windows prennent en charge la génération des séquences aléatoires</p>
			{% elseif global.random.note > 5 %}
				<p>Il y a suffisamment de génération de séquences aléatoire {{ global.random.data }}.</p>
			{% else %}
				<p>Il n'y a pas assez de génération de séquences aléatoire {{ global.random.data }}.</p>				
			{% endif %}
		</div>

	</div>
</div>


<div class="col s12 m6">

	<div class="card 

	{% if global.files.note == 5 %} green
	{% elseif global.files.note >= 2 %} orange
	{% else %} red lighten-2 
	{% endif %}">

	<div class="card-content white-text">
		<span class="card-title"><u>Fichiers </u> </span>

		{{ global.files.message }}

	</div>

</div>
</div>

</div>

</div>

{% endblock %}


{% block js %}

	{{ parent()}}

	<script type="text/javascript">


	$(document).ready(function(){

		var elastic = document.getElementById('elasticsearch'); 
		var logstash = document.getElementById('logstash'); 
		var kibana = document.getElementById('kibana'); 
		var createDir = document.getElementById('createDir'); 

		$('.tooltipped').tooltip({delay: 0});


		var downloadStack = function(e){

			var stackName = this.id; 

			$.ajax({
				'method':'get',
				'url':'/api/downloadStack?stack='+stackName,
				'beforeSend':function(){
					Materialize.toast("Déploiement de "+stackName+" en cours...", 10000, 'rounded') 					
				},
				'success':function(res){
					if (res==0){
						Materialize.toast(stackName+" a bien été déployé", 2000, 'rounded') 
						setTimeout(function(){}, 2000);
						location.reload(); 
					}else{
						Materialize.toast("Échec du déploiement de"+ stackName, 3000) 
					}
				}
			})

		}


		var createDirFunction = function(){

			console.log("ok")

			$.ajax({
				'method':'post',
				'url':'/api/createDir',
				'success':function(res){
					if (res==0){
						Materialize.toast(" Répertoire créé", 2000, 'rounded') 
						setTimeout(function(){}, 2000);
						location.reload(); 
					}else{
						Materialize.toast("Échec de création du répertoire", 3000) 
					}
				}
			})

		}; 


		if (elastic) elastic.addEventListener('click',downloadStack); 
		if (kibana) kibana.addEventListener('click',downloadStack); 
		if (logstash) logstash.addEventListener('click',downloadStack);
		if (createDir) createDir.addEventListener('click',createDirFunction)



	});








	</script>




{% endblock %}